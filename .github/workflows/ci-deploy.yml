name: CI + Deploy (GHCR â†’ Cloud Run)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  SERVICE_API: shoptalk-api
  SERVICE_UI:  shoptalk-ui
  REGION:      ${{ secrets.GCP_REGION }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      api-image: ${{ steps.set-outputs.outputs.api-image }}
      ui-image: ${{ steps.set-outputs.outputs.ui-image }}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      # Optional: run quick tests
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install deps (smoke test)
        run: |
          pip install -r api/requirements.txt
          pip install -r ui/requirements.txt
          echo " deps installed"

      # Authenticate to Google Cloud
      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Create Artifact Registry repository if it doesn't exist
      - name: Create Artifact Registry repository
        run: |
          gcloud artifacts repositories create shoptalk \
            --repository-format=docker \
            --location=${{ secrets.GCP_REGION }} \
            --description="ShopTalk container images" \
            --quiet || echo "Repository already exists"

      # Authenticate docker to Artifact Registry
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev --quiet

      # Build & push API to Artifact Registry
      - name: Build & push API to AR
        id: build-api
        run: |
          AR_HOST=${{ secrets.GCP_REGION }}-docker.pkg.dev
          AR_IMAGE_API=$AR_HOST/${{ secrets.GCP_PROJECT_ID }}/shoptalk/shoptalk-api:${{ github.sha }}
          docker build -t $AR_IMAGE_API -f api/Dockerfile ./api
          docker push $AR_IMAGE_API
          echo "api-image=$AR_IMAGE_API" >> $GITHUB_OUTPUT

      # Build & push UI to Artifact Registry
      - name: Build & push UI to AR
        id: build-ui
        run: |
          AR_HOST=${{ secrets.GCP_REGION }}-docker.pkg.dev
          AR_IMAGE_UI=$AR_HOST/${{ secrets.GCP_PROJECT_ID }}/shoptalk/shoptalk-ui:${{ github.sha }}
          docker build -t $AR_IMAGE_UI -f ui/Dockerfile ./ui
          docker push $AR_IMAGE_UI
          echo "ui-image=$AR_IMAGE_UI" >> $GITHUB_OUTPUT

      # Set job outputs
      - name: Set outputs
        id: set-outputs
        run: |
          echo "api-image=${{ steps.build-api.outputs.api-image }}" >> $GITHUB_OUTPUT
          echo "ui-image=${{ steps.build-ui.outputs.ui-image }}" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      # Authenticate to GCP
      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # --- Deploy API first ---
      - name: Deploy API to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_API }} \
            --image ${{ needs.build-and-push.outputs.api-image }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --memory 1Gi \
            --cpu 1 \
            --port 8000 \
            --set-env-vars "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }},OPENAI_BASE_URL=${{ secrets.OPENAI_BASE_URL }},DB_PATH=/vectordb,PARSE_MODEL=${{ secrets.PARSE_MODEL }},NLG_MODEL=${{ secrets.NLG_MODEL }},VECTORDB_GS_PATH=${{ secrets.VECTORDB_GS_PATH }}"

      - name: Get API URL
        id: apiurl
        run: |
          URL=$(gcloud run services describe ${{ env.SERVICE_API }} --region ${{ env.REGION }} --format='value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT

      # --- Deploy UI, pointing at API URL ---
      - name: Deploy UI to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_UI }} \
            --image ${{ needs.build-and-push.outputs.ui-image }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --memory 512Mi \
            --cpu 1 \
            --port 8501 \
            --set-env-vars "API_URL=${{ steps.apiurl.outputs.url }}"

      - name: Print endpoints
        run: |
          API_URL=${{ steps.apiurl.outputs.url }}
          UI_URL=$(gcloud run services describe ${{ env.SERVICE_UI }} --region ${{ env.REGION }} --format='value(status.url)')
          echo "API: $API_URL"
          echo "UI : $UI_URL"
