name: CI + Deploy (GHCR → Cloud Run)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  SERVICE_API: shoptalk-api
  SERVICE_UI:  shoptalk-ui
  REGION:      ${{ secrets.GCP_REGION }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      api-image: ${{ steps.build-api.outputs.api-image }}
      ui-image: ${{ steps.build-ui.outputs.ui-image }}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      # Optional: run quick tests
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install deps (smoke test)
        run: |
          pip install -r api/requirements.txt
          pip install -r ui/requirements.txt
          echo " deps installed"

      # Authenticate to Google Cloud
      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Create Artifact Registry repository if it doesn't exist
      - name: Create Artifact Registry repository
        run: |
          gcloud artifacts repositories create shoptalk \
            --repository-format=docker \
            --location=${{ secrets.GCP_REGION }} \
            --description="ShopTalk container images" \
            --quiet || echo "Repository already exists"

      # Authenticate docker to Artifact Registry
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev --quiet

      # Build & push API to Artifact Registry
      - name: Build & push API to AR
        id: build-api
        run: |
          AR_HOST=${{ secrets.GCP_REGION }}-docker.pkg.dev
          AR_IMAGE_API=$AR_HOST/${{ secrets.GCP_PROJECT_ID }}/shoptalk/shoptalk-api:${{ github.sha }}
          echo "Building API image: $AR_IMAGE_API"
          docker build -t $AR_IMAGE_API -f api/Dockerfile ./api
          docker push $AR_IMAGE_API
          echo "API image built: $AR_IMAGE_API"
          # Store just the image name without the full path to avoid secret detection
          echo "api-image=shoptalk-api:${{ github.sha }}" >> "$GITHUB_OUTPUT"

      # Build & push UI to Artifact Registry
      - name: Build & push UI to AR
        id: build-ui
        run: |
          AR_HOST=${{ secrets.GCP_REGION }}-docker.pkg.dev
          AR_IMAGE_UI=$AR_HOST/${{ secrets.GCP_PROJECT_ID }}/shoptalk/shoptalk-ui:${{ github.sha }}
          echo "Building UI image: $AR_IMAGE_UI"
          docker build -t $AR_IMAGE_UI -f ui/Dockerfile ./ui
          docker push $AR_IMAGE_UI
          echo "UI image built: $AR_IMAGE_UI"
          # Store just the image name without the full path to avoid secret detection
          echo "ui-image=shoptalk-ui:${{ github.sha }}" >> "$GITHUB_OUTPUT"

      # Debug: Verify step outputs are set correctly
      - name: Debug step outputs
        run: |
          echo "=== DEBUG: Step Outputs ==="
          echo "API step output: '${{ steps.build-api.outputs.api-image }}'"
          echo "UI step output: '${{ steps.build-ui.outputs.ui-image }}'"
          echo "========================="

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      contents: read
      id-token: write
    env:
      API_IMAGE_NAME: ${{ needs.build-and-push.outputs.api-image }}
      UI_IMAGE_NAME: ${{ needs.build-and-push.outputs.ui-image }}
    steps:
      - uses: actions/checkout@v4

      # Authenticate to GCP
      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Reconstruct full image paths and get service account email
      - name: Set image paths and service account
        run: |
          AR_HOST=${{ secrets.GCP_REGION }}-docker.pkg.dev
          echo "API_IMAGE=$AR_HOST/${{ secrets.GCP_PROJECT_ID }}/shoptalk/$API_IMAGE_NAME" >> $GITHUB_ENV
          echo "UI_IMAGE=$AR_HOST/${{ secrets.GCP_PROJECT_ID }}/shoptalk/$UI_IMAGE_NAME" >> $GITHUB_ENV
          
          # Use the service account from credentials for Cloud Run deployment
          SERVICE_ACCOUNT_EMAIL=$(echo '${{ secrets.GCP_CREDENTIALS }}' | jq -r '.client_email')
          echo "SERVICE_ACCOUNT_EMAIL=$SERVICE_ACCOUNT_EMAIL" >> $GITHUB_ENV
          
          # Debug: Show what we extracted
          echo "Using service account: $SERVICE_ACCOUNT_EMAIL"
          
          echo "Full API image: $AR_HOST/${{ secrets.GCP_PROJECT_ID }}/shoptalk/$API_IMAGE_NAME"
          echo "Full UI image: $AR_HOST/${{ secrets.GCP_PROJECT_ID }}/shoptalk/$UI_IMAGE_NAME"
          echo "Service account: $SERVICE_ACCOUNT_EMAIL"

      # Verify service account exists and has permissions
      - name: Verify service account
        run: |
          echo "Verifying service account: $SERVICE_ACCOUNT_EMAIL"
          
          # Check if service account exists
          if gcloud iam service-accounts describe $SERVICE_ACCOUNT_EMAIL >/dev/null 2>&1; then
            echo "✅ Service account exists: $SERVICE_ACCOUNT_EMAIL"
          else
            echo "❌ ERROR: Service account $SERVICE_ACCOUNT_EMAIL does not exist"
            echo "Please check the GCP_CREDENTIALS secret contains the correct service account JSON"
            exit 1
          fi
          
          # Check if service account has storage permissions
          if gcloud projects get-iam-policy ${{ secrets.GCP_PROJECT_ID }} --flatten="bindings[].members" --format="table(bindings.role)" --filter="bindings.members:$SERVICE_ACCOUNT_EMAIL" | grep -q "storage"; then
            echo "✅ Service account has storage permissions"
          else
            echo "⚠️  WARNING: Service account may not have storage permissions"
          fi
          
          echo "✅ Service account verification complete"

      # Verify image names before deployment
      - name: Verify image names
        run: |
          echo "=== PRE-DEPLOY VERIFICATION ==="
          echo "API Image: '$API_IMAGE'"
          echo "UI Image: '$UI_IMAGE'"
          echo "API Image length: ${#API_IMAGE}"
          echo "UI Image length: ${#UI_IMAGE}"
          
          # Verify images are not empty
          if [ -z "$API_IMAGE" ]; then
            echo "❌ ERROR: API image is empty!"
            exit 1
          fi
          
          if [ -z "$UI_IMAGE" ]; then
            echo "❌ ERROR: UI image is empty!"
            exit 1
          fi
          
          # Verify images contain expected parts
          if [[ "$API_IMAGE" != *"shoptalk-api"* ]]; then
            echo "❌ ERROR: API image doesn't contain 'shoptalk-api'"
            exit 1
          fi
          
          if [[ "$UI_IMAGE" != *"shoptalk-ui"* ]]; then
            echo "❌ ERROR: UI image doesn't contain 'shoptalk-ui'"
            exit 1
          fi
          
          echo "✅ All image names verified successfully!"
          echo "================================"

      # --- Deploy API first ---
      - name: Deploy API to Cloud Run
        run: |
          echo "🚀 Deploying API with image: $API_IMAGE"
          gcloud run deploy ${{ env.SERVICE_API }} \
            --image $API_IMAGE \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --memory 1Gi \
            --cpu 1 \
            --port 8000 \
            --service-account=$SERVICE_ACCOUNT_EMAIL \
            --set-env-vars "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }},OPENAI_BASE_URL=${{ secrets.OPENAI_BASE_URL }},DB_PATH=/vectordb,PARSE_MODEL=${{ secrets.PARSE_MODEL }},NLG_MODEL=${{ secrets.NLG_MODEL }},VECTORDB_GS_PATH=${{ secrets.VECTORDB_GS_PATH }}"

      - name: Get API URL
        id: apiurl
        run: |
          URL=$(gcloud run services describe ${{ env.SERVICE_API }} --region ${{ env.REGION }} --format='value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT

      # --- Deploy UI, pointing at API URL ---
      - name: Deploy UI to Cloud Run
        run: |
          echo "🚀 Deploying UI with image: $UI_IMAGE"
          gcloud run deploy ${{ env.SERVICE_UI }} \
            --image $UI_IMAGE \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --memory 512Mi \
            --cpu 1 \
            --port 8501 \
            --set-env-vars "API_URL=${{ steps.apiurl.outputs.url }}"

      - name: Print endpoints
        run: |
          API_URL=${{ steps.apiurl.outputs.url }}
          UI_URL=$(gcloud run services describe ${{ env.SERVICE_UI }} --region ${{ env.REGION }} --format='value(status.url)')
          echo "API: $API_URL"
          echo "UI : $UI_URL"
